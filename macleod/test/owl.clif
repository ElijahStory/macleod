/*******************************************************************************
 * Copyright (c) University of Toronto and others. All rights reserved. 
 * The content of this file is licensed under the Creative Commons Attribution-
 * ShareAlike 3.0 Unported license. The legal text of this license can be
 * found at http://creativecommons.org/licenses/by-sa/3.0/legalcode.
 *
 * Contributors:
 *    Torsten Hahmann - initial implementation
 *******************************************************************************/

(cl-text https://robert-powell.me/owl/owl.clif


(cl-comment 'Subclass')

(forall (x)
	(if
		(Cat x)
		(Animal x)	
	)			
)

(cl-comment 'Disjoint Classes')

(forall (x)
	(if
		(Cat x)
		(not (Dog x))
	)
)

(cl-comment 'Object SomeValuesFrom')

(forall (x)
	(if
		(Cat x)
		(exists (y) 
		    (and 
                (eats x y)
                (Mice y)
            )
		)
	)
)

(cl-comment 'Object AllValuesFrom')

(forall (x y)
	(if
	    (and
            (Cat x)
            (eats x y)
        )
        (Mice y)
	)
)

(cl-comment 'Sub-property')

(forall (x y)
	(if
	    ('<' x y)
	    ('<=' x y)
	)
)

(cl-comment 'Disjoint properties')

(forall (x y)
	(if
	    ('<' x y)
	    (not ('>' x y))
	)
)

(cl-comment 'Inverse Object Property')

(forall (x y)
	(if
	    (hasFather x y)
	    (fatherOf y x)
	)
)

(cl-comment 'Property range restriction')

(forall (x y)
	(if
	    (hasFather x y)
	    (Father y)
	)
)

(cl-comment 'Property domain restriction')

(forall (x y)
	(if
	    (hasFather x y)
	    (Child x)
	)
)

(cl-comment 'Functional object property')

(forall (x y)
	(if
	    (hasFather x y)
	    (not (exists (z)
            (and 
                (hasFather x z)
                (not ('=' z y))
            )
	    ))
	)
)

(cl-comment 'Inverse functional object property')

(forall (x y)
	(if
	    (hasFather x y)
	    (not (exists (z)
            (and 
                (hasFather z y)
                (not ('=' z x))
            )
	    ))
	)
)

(cl-comment 'Reflexive object property')

(forall (x)
    (knows x x)
)

(cl-comment 'Irreflexive object property')

(forall (x)
    (not (marriedTo x x))
)

(cl-comment 'Symmetric object property')

(forall (x y)
    (if 
        (knows x y)
        (knows y x)
    )
)

(cl-comment 'Asymmetric object property')

(forall (x y)
    (if (fatherOf x y)
        (not (fatherOf y x))
    )
)

(cl-comment 'Transitive object property')

(forall (x y z)
    (if 
        (and
            (ancestorOf x y)
            (ancestorOf y z)
        )
        (ancestorOf x z)
    )
)

(fatherOf PETER STEWIE)

(forall (x y)
	(if	(pre x y)
		(and	(mo x)
			(mo y))))

(forall (x y z)
	(if	(and	(pre x y)
			(pre y z))
		(pre x z)))

(forall (x)
	(not (pre x x)))

(forall (x y z)
	(if	(and	(pre x z)
			(pre y z))
		(or	(= x y)
			(pre x y)
			(pre y x))))

(forall (x y)
	(if	(and	(mo x)
			(mo y))
		(exists (z)
			(and	(or	(pre z x)
					(= z x))
				(or	(pre z y)
					(= z y))))))

(exists (x)
	(mo x))

)

(forall (x)
	(if
		(SP x)
		(exists (y)
			(and
				(HGU y)
				(C (r x) (r y))
			)
		)
	)
)

)
