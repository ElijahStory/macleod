'''
Created on 2012-11-20

@author: Torsten Hahmann
'''

import os, subprocess, time, shutil

class VAMPIRE(object):

    VAMPIRE_ENDING = '.vam'

    ## options
    max_seconds_proof = 0

    def __init__(self):
        self.max_seconds_proof = 600
        

    # run prover9 and mace4 in parallel
    def run_vampire (self,vampire_cmd):
        
    
        vampire = subprocess.Popen(vampire_cmd, shell=True, close_fds=True, preexec_fn=os.setsid)
        
        while vampire.returncode is None:
            time.sleep(2.0)
            vampire.poll()
        
        # just sort the output
        time.sleep(1.0)
        
        return (vampire.returncode) 
    
    
    def get_vampire_basic_cmd (self,tptp_file):
        
        vampireargs = self.get_local_vampire() + ' --mode casc --proof tptp'
        
        if self.max_seconds_proof:
            vampireargs += ' -t ' + repr(self.max_seconds_proof)
        
        vampireargs += ' < ' + tptp_file
    
        return vampireargs

    
     
    # converts all symbols from uppercase to lowercase and removes quotation marks generated by ladr_to_tptp translator
    # this prepares the file for use with Vampire 
    def lowercase_tptp_file (self, tptp_file, nonlogical_symbols):    

        # first convert to FOF tptp file
        self.fof_tptp_file(tptp_file)

        out_file = open(tptp_file, 'r')
        old = out_file.read() # read everything in the file
        out_file.close()
        new = old
        for symbol in nonlogical_symbols:
            new = new.replace('\''+symbol[0]+'\'', ' '+symbol[0].lower())
        for symbol in nonlogical_symbols:
            new = new.replace(symbol[0], symbol[0].lower())
        for symbol in nonlogical_symbols:
            new = new.replace(symbol[0].upper(), symbol[0].lower())
        out_file = open(tptp_file, 'w')
        out_file.write(new) # write the new line        
        #print new
        out_file.close()
        

    # convert all CNF formulas as FOF formulas
    def fof_tptp_file(self, tptp_file):
        in_file = open(tptp_file, 'r+')
        line = in_file.readline()
        temp_file_name =  tptp_file+'.temp'
        out_file = open(temp_file_name, 'w')
        while line:
            if line.startswith('cnf('):
                line = line.replace('cnf(', 'fof(')                   
            out_file.write(line)
            line = in_file.readline()
        in_file.close()         
        out_file.close()
        #Remove original file
        os.remove(tptp_file)
        #Move new file
        shutil.move(temp_file_name, tptp_file)         

    # make one lemma a conjecture
    # number: the lemma to prove (from the start of all axioms
    # the total number of lemmas contained in the file (will remove all except the one we want to prove)
    # use_previous: reuse the previous lemmas in the same file, i.e., do not delete earlier lemmas (assume they are provable)
    def select_lemma (self, tptp_in_file, number, total, use_previous = False):
        in_file = open(tptp_in_file, 'r+')
        line = in_file.readline()
        temp_file_name =  tptp_in_file+'.temp'
        out_file = open(temp_file_name, 'w')
        count = 0
        while line:
            if line.startswith('fof(') or line.startswith('cnf('):
                count += 1
                # delete all other lemmas; do not delete previous lemmas if instructed so
                if (count<number and not use_previous) or (count>number and count<=total):
                    # remove other lemmas
                    line = in_file.readline()
                    continue
                elif count==number:
                    line = line.replace(',axiom,', ',conjecture,')
                    
            out_file.write(line)
            line = in_file.readline()
        in_file.close()         
        out_file.close()
        #Remove original file
        os.remove(tptp_in_file)
        #Move new file
        shutil.move(temp_file_name, tptp_in_file)         
        

    # get the version of the currently installed vampire
    def get_version(self):
        vampire = subprocess.Popen(self.get_local_vampire() +' --version', shell=True, close_fds=True, preexec_fn=os.setsid, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
        # only one line as output expected
        return vampire.stdout.readline()
        
    # need to change this to adapt to other operating systems
    def get_local_vampire(self):
        return 'vampire_lin32'
        
